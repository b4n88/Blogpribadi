---
title: "Berapa banyak cup yang harus dibuat ?"
author: "Albani"
date: "2025-01-13"
categories: [Data Analyst, Market Research]
---
> *Sebuah study case melakukan estimasi..*

-------

Pada suatu hari rekan saya menanyakan pada saya : 

>berapa banyak cup yang harus saya buat agar tidak terlalu overstock. 

Tanpa menunggu lama saya langsung meminta data last.3 Month dari data penjualan. Karena saya tidak mau membeberkan data penjualan sehingga saya meminta chat GPT untuk membuatkan data yang sesuai dengan konteks. saya juga meminta dibuatkan Outlier agar menganilasnya dengan penuh keringat. Saya menulis sperti ini pada Chat GPT 

> tolong buatkan saya puzle berupa penjulan cup buah potong pepaya, semangka merah, semangka kuning, mangga dan melon, berupa data penjualan yang beragam dan tolong simpoankan outlier agar bisa di cek, sehingga saya bisa melakukan anlisa, data dibuatkan dalam bentuk 3 bulan. puzlenya adalah bagaimana cara agar kita bisa menghitung berapa cup perhari interval yang kita buat agar tidak over cup dan tidk terlalu sedikit

Meskipun banyak typo tapi mbah Chat GPT ini supper duper kere, hampir saja saya mengajaknya taaruf.

dengan teknik ninjutsunya membuatkan saya code seperti di bawah ini, Mari kita jalankan sript ini di R langsung..

Sebelum itu kita harus menjalankan library biar kerja serasa lewat dijalan tol, mulussss..

```{r, echo= TRUE, results='hide', warning=FALSE, message=FALSE}
library(skimr)
library(DataExplorer)
library(dlookr)
library(dplyr)
library(lubridate)
```


```{r}
# Load required libraries
library(dplyr)
library(lubridate)

# Set seed for reproducibility
set.seed(42)

# Generate dates for 3 months
dates <- seq(as.Date("2023-01-01"), as.Date("2023-03-31"), by = "day")

# Fruit types
fruits <- c("Pepaya", "Semangka Merah", "Semangka Kuning", "Mangga", "Melon")

# Generate sales data
sales_data <- expand.grid(Date = dates, Fruit = fruits) %>%
  mutate(
    Cups_Sold = case_when(
      Fruit == "Pepaya" ~ rpois(n(), lambda = 10),           # Normal sales for Pepaya
      Fruit == "Semangka Merah" ~ rpois(n(), lambda = 15),   # Normal sales for Semangka Merah
      Fruit == "Semangka Kuning" ~ rpois(n(), lambda = 12),  # Normal sales for Semangka Kuning
      Fruit == "Mangga" ~ rpois(n(), lambda = 20),           # Normal sales for Mangga
      Fruit == "Melon" ~ rpois(n(), lambda = 8)              # Normal sales for Melon
    )
  )

# Add outliers manually
outliers <- data.frame(
  Date = as.Date(c("2023-01-15", "2023-02-10", "2023-03-05")),
  Fruit = c("Pepaya", "Mangga", "Semangka Merah"),
  Cups_Sold = c(50, 70, 60)
)

# Combine the data
sales_data <- bind_rows(sales_data, outliers)

# View a sample of the data
head(sales_data, 5)
```

Biar gacor kita ubah type data fruit..

```{r}
sales_data$Fruit <- as.factor(sales_data$Fruit)
```

Data-data diatas akan terlihat seperti dibawah ini.

```{r}
library(ggplot2)
library(tidyverse)
ggplot(sales_data) +
 aes(x = Fruit, y = Cups_Sold, fill = Fruit) +
 geom_col() +
 scale_fill_hue(direction = 1) +
 theme_linedraw()
```

## Analisis Deskriptif

Dengan data diatas apa yang akan kita perbuat, sebagai pemula statsitik saya terbiasa dengan melihat data deskripsi sehingga saya akan mencoba menganalisa deksriptif terlebih dahulu.

Dengan menggunakan `skimr` dan `DataExplorer` kita bisa menambah wawasan tentang data.

### Missing value

```{r}
skim(sales_data)
```
```{r}
summary(sales_data)
```
```{r}
introduce(sales_data)
plot_intro(sales_data)
```

### Duplicated checking

```{r}
sales_data_duplicated <- sales_data %>% 
  filter(duplicated(.))

print(sales_data_duplicated)
```

```{r}
duplicate_buah <- sales_data[duplicated(sales_data)]
duplicate_buah
```

```{r}
data_no_duplicate <- sales_data %>% 
  distinct()
head(data_no_duplicate,5)
```


```{r}
diagnose(sales_data)
```

```{r}
plot_normality(sales_data)
```

### Insight from analysis from descriptive

- Missing value hilang
- Data tidak balance (Jumlah pada buah ada yang 91 dan 90)
- Data sudah lumayan untuk di analisa.
- Terdapat beberapa outlier sehingga perlu perlakuan khususagar dataperkiraan bisa sesuai.

## Berapa cup yang harus dibuat ?

Berikut adalah insight yang bisa kita dapatkan dalam pengambilan sample berapa banyak cup yang kita butuhkan.

### Dengan Interval kepercayaan

> Dengan interval kepercayaan, kita membutuhkan data berupa Rata-rata, standar Deviasi & Jumlah observasi perhari. Karena datanya belum ada maka kita buat terlebih dahulu.

```{r}
head(sales_data, 5)
```

```{r}
# Menambahkan kolom  hari
sales_data$Hari <- weekdays(sales_data$Date)
head(sales_data,5)
```

```{r}
# Membuat rata-rata
rata_rata_perhari <- sales_data %>% 
  group_by(Hari) %>% 
  summarise(rata_rata = mean(Cups_Sold))

rata_rata_perhari <- arrange(rata_rata_perhari, Hari)
rata_rata_perhari
```

```{r}
# Membuat data standar deviasi

sd_perhari <- sales_data %>% 
  group_by(Hari) %>% 
  summarise(Sd = sd(Cups_Sold))

sd_perhari <- arrange(sd_perhari, Hari)
sd_perhari
```

```{r}
# MEnggabungkan data
fiks_data = merge(rata_rata_perhari, sd_perhari,  by = "Hari")
fiks_data <- fiks_data %>% 
  mutate(Jumlah_hari = 90)

fiks_data$Jumlah_hari <- as.numeric(fiks_data$Jumlah_hari)
head(fiks_data)
```

#### Interval kepercayaan

```
Cup_interval <- fiks_data %>% 
  mutate(
    error = 1.96 * (sd / (sqrt(Jumlah_hari))), # Margin Of Eror 90 = jumlah hari
    lower_ci = rata_rata - error,
    upper_ci = rata_rata + error
  )
```

       Hari   rata_rata       sd Jumlah_hari    error lower_ci upper_ci
1    Friday   13.90909 8.662434          30  3.1008  10.8083  17.0098
2    Monday   13.01538 5.278175          30  1.8907  11.1247  14.9061
3  Saturday   13.30000 5.639750          30  2.0160  11.2840  15.3160
4    Sunday   14.37313 8.734876          30  3.1270  11.2461  17.5002
5  Thursday   13.00000 4.582576          30  1.6407  11.3593  14.6407

Dengan data di atas kita bisa membuat interval berapa banyak cup yang akan kita buat perhainya.

### Dengan Simulasi Monte Carlo

> Jika overstock kita mengalami kerugian sebanyak `-10.000` jika lost sales kita rugi sebanyak `5.000`. Sehingga berapa banyak yang harus kita packing? Jika rata-rata = `100`, dan sd = `10` ? Jika kita melakukan estimasi  80-120 pack berapa besar peluangnya ?

```{r}
# Parameter simulasi
set.seed(123)  # Untuk hasil yang dapat direproduksi
mean_demand <- 100      # Rata-rata permintaan harian
sd_demand <- 10         # Standar deviasi permintaan
cost_overstock <- -10000 # Biaya overstock per cup
cost_lost_sales <- -5000 # Biaya kehilangan per cup
num_simulations <- 10000  # Jumlah simulasi
production_levels <- seq(80, 120, by = 1) # Level produksi yang diuji

# Fungsi untuk menghitung biaya total
calculate_total_cost <- function(production, demand) {
  overstock_cost <- ifelse(production > demand, (production - demand) * cost_overstock, 0)
  lost_sales_cost <- ifelse(production < demand, (demand - production) * cost_lost_sales, 0)
  return(overstock_cost + lost_sales_cost)
}

# Hasil simulasi
results <- data.frame(Production = numeric(), AverageCost = numeric())

for (production in production_levels) {
  simulated_demand <- rnorm(num_simulations, mean = mean_demand, sd = sd_demand)
  total_cost <- sapply(simulated_demand, function(d) calculate_total_cost(production, d))
  avg_cost <- mean(total_cost)
  results <- rbind(results, data.frame(Production = production, AverageCost = avg_cost))
}

# Menampilkan hasil simulasi
library(ggplot2)
ggplot(results, aes(x = Production, y = AverageCost)) +
  geom_line() +
  labs(title = "Monte Carlo Simulation: Biaya Total",
       x = "Level Produksi",
       y = "Biaya Rata-rata (Rp)") +
  theme_minimal()

```

Dengan plot diatas kita bisa memperkirakan bahwasanya dengan membuat 90-100 cup maka kita memeliki kerugian paling minimal.

Ini masih belum sempurna, namun kita bisa menyempurnakan jika ada project.
